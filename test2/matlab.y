%{
    #include <string>
    #include <iostream>
    #include "matlab_lexer.h"  // Generated by reflex
    
    extern int matlablex();
    void matlaberror(const char *msg);
%}

%code requires {
    #include <string>
}

%union {
    int ival;
    double dval;
    std::string *str;
}

%token <ival> INTEGER
%token <dval> FLOAT
%token <str> IDENTIFIER STRING_LITERAL

%token LBRACKET RBRACKET LPAREN RPAREN LBRACE RBRACE
%token EQUALS COMMA SEMICOLON COLON ELLIPSIS

%token IF ELSE ELSEIF END FOR WHILE FUNCTION RETURN BREAK CONTINUE

%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE

%%

input: 
    /* empty */
    | input statement
    ;

statement: 
    assignment ';'
    | control_statement
    | function_declaration
    ;

assignment: 
    IDENTIFIER EQUALS expression
    ;

expression: 
    INTEGER
    | FLOAT
    | STRING_LITERAL
    | IDENTIFIER
    | expression '+' expression
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    ;

control_statement:
    if_statement
    | for_statement
    | while_statement
    ;

if_statement: 
    IF expression statement %prec LOWER_THAN_ELSE
    | IF expression statement ELSE statement
    | IF expression statement ELSEIF expression statement
    ;

for_statement:
    FOR IDENTIFIER EQUALS expression statement
    ;

while_statement:
    WHILE expression statement
    ;

function_declaration:
    FUNCTION IDENTIFIER '(' ')' statement
    | FUNCTION IDENTIFIER '(' arg_list ')' statement
    ;

arg_list:
    IDENTIFIER
    | arg_list ',' IDENTIFIER
    ;

%%

void matlaberror(const char *msg) {
    std::cerr << "Error: " << msg << std::endl;
}
