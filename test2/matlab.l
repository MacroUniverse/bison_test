%option c++
%option yyclass="MatlabLexer"
%option noyywrap
%option prefix="matlab"
%option header-file="matlab_lexer.h"

%top{
    #include "matlab.tab.h"  // Generated by bison
    #include <string>
%}

%class{
    private:
        std::string string_buf;
%}

%init{
    // Initialization code if needed
%}

%x COMMENT
%x STRING

DIGIT       [0-9]
INT         {DIGIT}+
FLOAT       {DIGIT}+"."{DIGIT}*
ID          [a-zA-Z_][a-zA-Z0-9_]*

%%

%{
    // Code to execute for each rule
    #define TOKEN(t) return matlab::parser::token::t
%}

"%"             { BEGIN(COMMENT); }
<COMMENT>\n     { BEGIN(INITIAL); }
<COMMENT>.      { /* ignore comment content */ }

"'"             { BEGIN(STRING); string_buf.clear(); }
<STRING>"'"     { BEGIN(INITIAL); yylval->str = new std::string(string_buf); TOKEN(STRING_LITERAL); }
<STRING>[^']+   { string_buf += yytext; }
<STRING>\\.     { string_buf += yytext[1]; }  // Handle escape sequences

"["             { TOKEN(LBRACKET); }
"]"             { TOKEN(RBRACKET); }
"("             { TOKEN(LPAREN); }
")"             { TOKEN(RPAREN); }
"{"             { TOKEN(LBRACE); }
"}"             { TOKEN(RBRACE); }
"="             { TOKEN(EQUALS); }
","             { TOKEN(COMMA); }
";"             { TOKEN(SEMICOLON); }
":"             { TOKEN(COLON); }
"..."           { TOKEN(ELLIPSIS); }

"if"            { TOKEN(IF); }
"else"          { TOKEN(ELSE); }
"elseif"        { TOKEN(ELSEIF); }
"end"           { TOKEN(END); }
"for"           { TOKEN(FOR); }
"while"         { TOKEN(WHILE); }
"function"      { TOKEN(FUNCTION); }
"return"        { TOKEN(RETURN); }
"break"         { TOKEN(BREAK); }
"continue"      { TOKEN(CONTINUE); }

{INT}           { yylval->ival = atoi(yytext); TOKEN(INTEGER); }
{FLOAT}         { yylval->dval = atof(yytext); TOKEN(FLOAT); }
{ID}            { yylval->str = new std::string(yytext); TOKEN(IDENTIFIER); }

[ \t\r]+        { /* ignore whitespace */ }
\n              { /* ignore newline or count lines */ }

.               { /* handle error */ }

%%

// Additional C++ code can go here
